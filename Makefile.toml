[config]
default_to_workspace = false

[env]
HOST = "0.0.0.0"
PORT = 18080
DATABASE_USER = "app"
DATABASE_PASSWORD = "passwd"
DATABASE_NAME = "app"
DATABASE_PORT_INNER = "5432"
DATABASE_PORT_OUTER = "5432"

[tasks.set-env-docker.env]
DATABASE_HOST = "postgres"
DATABASE_PORT = "${DATABASE_PORT_INNER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USER}&password=${DATABASE_PASSWORD}"

[tasks.set-env-local.env]
DATABASE_HOST = "localhost"
DATABASE_PORT = "${DATABASE_PORT_OUTER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USER}&password=${DATABASE_PASSWORD}"

[tasks.before-build]
run_task = [{ name = ["compose-up-db", "migrate"] }]

[tasks.run]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
"args" = ["run", "${@}"]

[tasks.run-in-docker]
extend = "set-env-docker"
dependencies = ["before-build"]
command = "podman-compose"
args = ["up", "-d", "app"]

[tasks.log]
extend = "set-env-docker"
dependencies = ["before-build"]
command = "podman-compose"
args = ["logs", "${@}"]

[tasks.test]
extend = "set-env-local"
command = "cargo"
args = [
  "nextest",
  "run",
  "--status-level",
  "all",
  "--test-threads=1",
  "--workspace",
]

[tasks.clippy]
extend = "set-env-local"
command = "cargo"
args = ["clippy", "--all", "--all-targets", "${@}"]

[tasks.fmt]
extend = "set-env-local"
command = "cargo"
args = ["fmt", "--all", "${@}"]

[tasks.build]
extend = "set-env-docker"
dependencies = ["before-build"]
command = "cargo"
args = ["build", "${@}"]


# for CI
[tasks.before-build-ci]
run_task = [{ name = ["compose-up-db-ci", "migrate"] }]

[tasks.compose-up-db-ci]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "postgres"]

[tasks.clippy-ci]
dependencies = ["before-build-ci"]
run_task = "clippy"

[tasks.test-ci]
dependencies = ["before-build-ci"]
run_task = "test"

# podman-compose
[tasks.compose-down]
extend = "set-env-docker"
command = "podman-compose"
args = ["down"]

[tasks.compose-remove]
extend = "set-env-docker"
command = "podman-compose"
args = ["down", "-v"]

[tasks.compose-ps]
extend = "set-env-docker"
command = "podman-compose"
args = ["ps"]

[tasks.compose-up-db]
extend = "set-env-docker"
command = "podman-compose"
args = ["up", "-d", "postgres"]

# sqlx
[tasks.migrate]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help" }
script = '''
#!/bin/bash
until sqlx migrate run --source adapter/migrations; do
  sleep 1
done
'''

[tasks.sqlx]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help" }
command = "sqlx"
args = ["${@}", "--source", "adapter/migrations"]

[tasks.psql]
extend = "set-env-local"
command = "podman"
args = [
  "run",
  "-it",
  "--rm",
  "--network",
  "host",
  "-v",
  "${PWD}:/work",
  "postgres:15",
  "psql",
  "${DATABASE_URL}",
  "${@}",
]

[tasks.initial-setup]
extend = "set-env-local"
command = "podman"
args = [
  "run",
  "-it",
  "--rm",
  "--network",
  "host",
  "-v",
  "${PWD}:/work",
  "postgres:15",
  "psql",
  "${DATABASE_URL}",
  "-f",
  "/work/data/initial_setup.sql",
]
